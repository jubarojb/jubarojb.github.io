*, 
::before, 
::after {
	box-sizing: border-box;
}

.container {
	background: red;
	display: grid;
	gap: 1rem;
	grid-auto-rows: 10rem; /* Todas las filas que se añadan son de 10rem */
	
	/* La siguiente linia hace la magia. Primero con keyword: auto-fill
	(que podría usar-se de manera similar, pero con matices el auto-fit)
	y luego el repeat con la funcion minmax que define el mínimo que ocuparà
	la casilla y su máximo*/
	grid-template-columns: repeat(auto-fill, minmax(10rem, 1fr));
	
	/* Si no tengo suficientes elementos para rellenar una linea,
	con autofit se comporta diferente, rellenando y expandiendo todo el espacio. 
	Mientras que con auto-fill dejaba el hueco para un elemento más*/
	/*grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));*/
	
	/* Puede pasar que el mínimdo de la función minmax sea demasiado grande, 
	Y si el viewport se hace demasiado pequeño, veamos overlflow.
	Para solucionar eso podríamos usar la función "min" que de dos valores
	usará el más pequeño.*/
	/*grid-template-columns: repeat(auto-fill, minmax(min(100%, 10rem), 1fr));*/
	
	/* similar a la función min() hay la max() y la clamp()
	[El clamp usa un tampaño mínimo, un tamaño ideal y un tamaño máximo]
	que son muy pràcticas para font-size;*/

	

}
.element {
	overflow:hidden;
	padding:1rem;
	background: green;
	border-radius:0.3rem;
	box-shadow:0 0.2rem 0.3rem rgba(0, 0, 0, 0.4);	
	/* Para que las imagenes queden bien, lo configuraré a continuación:*/
	width:100px;
	height:10rem;
}

.element_img {
	width:100%;
	height:150px;
	object-fit: contain;
}
